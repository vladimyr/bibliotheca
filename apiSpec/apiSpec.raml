#%RAML 0.8 
title: Books API
version: v1
baseUri: http://localhost:1337/api
/users:
  type: 
    collection:
      customExample: |
        [
          {
            "_id": "55d705d439bd303c0f09b93e",
            "email": "admin@extensionengine.com",
            "isAdmin": true,
            "verified": true,
            "books": [
              {
                "_id": "55d705d439bd303c0f09b940",
                "title": "Test Book",
                "description": "Test Desc",
                "pages": 123,
                "isbn10": "1-234-56789-8",
                "isbn13": "1-234-56789-1234",
                "pageUrl": "testUrl",
                "imageUrl": "testImgUrl",
                "user": "55d705d439bd303c0f09b93e"
              }
            ]
          },
          {
            "_id": "55d705d439bd303c0f09b93f",
            "email": "user@extensionengine.com",
            "isAdmin": false,
            "books": []
          }
        ]

  /{id}: 
    uriParameters: 
      id: 
        displayName: User ID
        description: 24-character ID of the user in the database.
    type:
      collection-item:
        customExample: |
          {
            "_id": "55d705d439bd303c0f09b93e",
            "email": "admin@extensionengine.com",
            "isAdmin": true,
            "books": [
              {
                "_id": "55d705d439bd303c0f09b940",
                "title": "Test Book",
                "description": "Test Desc",
                "pages": 123,
                "isbn10": "1-234-56789-8",
                "isbn13": "1-234-56789-1234",
                "pageUrl": "testUrl",
                "imageUrl": "testImgUrl",
                "user": "55d705d439bd303c0f09b93e"
              }
            ]
          }
    /changePass:
      displayName: Change Password
      put:
        description: Change an old password to a new one.
        body:
          application/json:  
            schema: |
              {
                "type": "object",
                "description": "JSON object containing new and old password.", 
                "properties": {
                  "newPass": { "type": "string"},
                  "oldPass": { "type": "string"}                
                },
                "required": ["newPass", "oldPass"]
              }
            example: |
              {
                "newPass":"123",
                "oldPass":"445"
              }
        responses:
          200:
          401:
          404:
    /reverseAdmin:
      displayName: Reverse Admin
      get: 
        description: Reverse admin privileges.
        headers: 
          bearer:
            description: Access token given to the user by the server.
        responses:
          200:
            body:
              application/json:
                schema: user
                example: |
                  {
                    "_id": "55d705d439bd303c0f09b93e",
                    "email": "admin@extensionengine.com",
                    "isAdmin": true,
                    "books": [
                      "55d705d439bd303c0f09b940"
                    ]
                  }
          401:
          404:
/books: 
  displayName: Books
  type: 
    collection:
      customExample: |
        [
          {
            "_id": "55d705d439bd303c0f09b940",
            "title": "Test Book",
            "description": "Test Desc",
            "pages": 123,
            "isbn10": "1-234-56789-8",
            "isbn13": "1-234-56789-1234",
            "pageUrl": "testUrl",
            "imageUrl": "testImgUrl",
            "user": {
              "_id": "55d705d439bd303c0f09b93e",
              "email": "admin@extensionengine.com",
              "isAdmin": true,
              "books": [
                "55d705d439bd303c0f09b940",
                "55d705d439bd303c0f09b941"
              ]
            }
          },
          {
            "_id": "55d705d439bd303c0f09b941",
            "title": "Second Test Book",
            "description": "Second Test Desc",
            "pages": 123,
            "isbn10": "1-234-56789-8",
            "isbn13": "1-234-56789-1234",
            "pageUrl": "testUrl",
            "imageUrl": "testImgUrl",
            "user": {
              "_id": "55d705d439bd303c0f09b93e",
              "email": "admin@extensionengine.com",
              "isAdmin": true,
              "books": [
                "55d705d439bd303c0f09b940",
                "55d705d439bd303c0f09b941"
              ]
            }
          }
        ]
  post:
    body:
      application/json:
        schema: |
          {
            "type": "object",
            "description": "JSON object representation of a book.", 
            "properties": {
              "title": { "type": "string"},
              "description": { "type": "string"},
              "pages": { "type": "string"},
              "isbn10": { "type": "string"},
              "isbn13": { "type": "string"},
              "pageUrl": { "type": "string"},
              "imageUrl": { "type": "string"},
              "token": { "type": "string"},
              "user": { "type": "string"}
            },
            "required": ["_id", "title", "user"]
          }
        example: |
          {
            "title": "Test Book",
            "description": "Test Desc",
            "pages": 123,
            "isbn10": "1-234-56789-8",
            "isbn13": "1-234-56789-1234",
            "pageUrl": "testUrl",
            "imageUrl": "testImgUrl",
            "user": "55d705d439bd303c0f09b93e"
          }
  /{id}: 
    uriParameters: 
      id: 
        displayName: Book ID
        description: 24-character ID of the book in the database.
    type:
      collection-item:
        customExample: |
          {
            "_id": "55d705d439bd303c0f09b940",
            "title": "Test Book",
            "description": "Test Desc",
            "pages": 123,
            "isbn10": "1-234-56789-8",
            "isbn13": "1-234-56789-1234",
            "pageUrl": "testUrl",
            "imageUrl": "testImgUrl",
            "user": {
              "_id": "55d705d439bd303c0f09b93e",
              "email": "admin@extensionengine.com",
              "isAdmin": true,
              "books": [
                "55d705d439bd303c0f09b940",
                "55d705d439bd303c0f09b941"
              ]
            }
          }
    put:
      body:
        application/json:
          example: |
            {
              "_id": "55d705d439bd303c0f09b940",
              "title": "Test Book",
              "description": "Test Desc",
              "pages": 123,
              "isbn10": "1-234-56789-8",
              "isbn13": "1-234-56789-1234",
              "pageUrl": "testUrl",
              "imageUrl": "testImgUrl",
              "user": "55d705d439bd303c0f09b93e"
            }
    delete:
    /like:
      get:
        description: Get response saying does the logged user have the book liked or not.
        responses:
          200:
            body:
              application/json:
                schema: book
                example: |
                  {
                    "_id": "55d705d439bd303c0f09b940",
                    "title": "Test Book",
                    "description": "Test Desc",
                    "pages": 123,
                    "isbn10": "1-234-56789-8",
                    "isbn13": "1-234-56789-1234",
                    "pageUrl": "testUrl",
                    "imageUrl": "testImgUrl",
                    "user": "55d705d439bd303c0f09b93e"
                  } 
      put:
/register:
  post:
    body:
      application/json:  
        schema: credential
        example: |
          {
            "email":"user@extensionengine.com",
            "password":"123"
          }
    responses:
      200:
        body:
          application/json:
            schema: user
            example: |
              {
                "_id": "55d705d439bd303c0f09b93f",
                "email": "user@extensionengine.com",
                "isAdmin": false,
                "books": []
              }
      204:
/login:
  post:
    body:
      application/json:  
        schema: credential
        example: |
          {
            "email":"user@extensionengine.com",
            "password":"123"
          }
    responses:
      200:
        body:
          application/json:
            schema: userAndToken
            example: |
              {
              "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI1NWRiMjZhNDdjMWRmOGMwMWU0ODAyMzIiLCJlHAiOjE1MDA0MzA1ODM3ODJ9.EYq6AVCPfKS_89-9S1eGq9ZKVmyryjbbg3XCR0x2v5ce",
                "user": {
                  "email": "user@extensionengine.com",
                  "_id": "55db56b5c84a04b00a56241e",
                  "books": []
                }
              }
      404:
schemas: 
  - credential: |
      {
        "type": "object",
        "description": "JSON object representation of user credentials.", 
        "properties": {
          "email": { "type": "string"},
          "password": { "type": "string"}
        },
        "required": ["password", "email"]
      }
  - user: |
      {
        "type": "object",
        "description": "JSON object representation of a user.", 
        "properties": {
          "_id": { "type": "string"},
          "email": { "type": "string"},
          "isAdmin": { "type": "boolean"},
          "verified": { "type": "boolean"},
          "books": { 
            "type": "array",
            "items": "string"
          }
        },
        "required": ["_id", "email"]
      }
  - users: |
      {
        "type": "array",
        "description": "JSON array representation of users.", 
        "items": { "$ref": "userPopulated"}
      }
  - userPopulated: |
      {
        "type": "object",
        "description": "JSON object representation of a user.", 
        "properties": {
          "_id": { "type": "string"},
          "email": { "type": "string"},
          "isAdmin": { "type": "boolean"},
          "verified": { "type": "boolean"},
          "books": { 
            "type": "array",
            "items": { "$ref": "book"}
          }
        },
        "required": ["_id", "email"]
      }
  - userAndToken: |
      {
        "type": "object",
        "description": "JSON object containing an user and token.", 
        "properties": {
          "user": { "$ref": "user"},
          "token": { "type": "string"}
        },
        "required": ["user", "token"]
      }
  - book: |
      {
        "type": "object",
        "description": "JSON object representation of a book.", 
        "properties": {
          "_id": { "type": "string"},
          "title": { "type": "string"},
          "description": { "type": "string"},
          "pages": { "type": "string"},
          "isbn10": { "type": "string"},
          "isbn13": { "type": "string"},
          "pageUrl": { "type": "string"},
          "imageUrl": { "type": "string"},
          "user": { "type": "string"}
        },
        "required": ["_id", "title", "user"]
      }
  - books: |
      {
        "type": "array",
        "description": "JSON array representation of books.", 
        "items": { "$ref": "bookPopulated"}
      }
  - bookPopulated: |
      {
        "type": "object",
        "description": "JSON object representation of a book.", 
        "properties": {
          "_id": { "type": "string"},
          "title": { "type": "string"},
          "description": { "type": "string"},
          "pages": { "type": "string"},
          "isbn10": { "type": "string"},
          "isbn13": { "type": "string"},
          "pageUrl": { "type": "string"},
          "imageUrl": { "type": "string"},
          "user": { 
            "type": "object",
            "$ref": "user"
          }
        },
        "required": ["_id", "title", "user"]
      }
resourceTypes:
  - collection:
      get: 
        description: Get all <<resourcePathName>>.
        headers:
          
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName>>
                example: | 
                  <<customExample>>
          401:
      post?:
        description: Post a new <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName|!singularize>>Populated
                example: | 
                  <<customExample>>
          401:    
  - collection-item:
      get: 
        description: Get a single <<resourcePathName|!singularize>>.
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName|!singularize>>Populated
                example: |
                  <<customExample>>
          401:
          404:
      put?: 
        description: Modify a <<resourcePathName|!singularize>>.
        body:
          application/json:
            schema: book
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName|!singularize>>Populated
                example: |
                  <<customExample>>
          401:
          404:
      delete?: 
        description: Delete a <<resourcePathName|!singularize>>.
        responses: 
          200:
          401:
          404: